#version 460
#extension GL_KHR_vulkan_glsl : enable // Vulkan-specific syntax
#extension GL_GOOGLE_include_directive : enable // Include files
#extension GL_EXT_ray_tracing : enable // Raytracing

// Include structs and bindings

#include "../../foray/src/shaders/rt_common/bindpoints.glsl"
#include "../../foray/src/shaders/common/camera.glsl"
#include "../../foray/src/shaders/rt_common/tlas.glsl"
#include "../../foray/src/shaders/rt_common/imageoutput.glsl"
#include "../../foray/src/shaders/common/lcrng.glsl"
#include "../../foray/src/shaders/common/noisetex.glsl"
#include "../../foray/src/shaders/rt_common/tracerconfig.glsl"

layout(binding = 11,  set = 0) readonly uniform RestirConfiguration
{
    /// @brief Current frames projection matrix
    uint   ReservoirSize;
    mat4   PrevFrameProjectionViewMatrix;
    vec4   CameraPos;
    uvec2  ScreenSize;
    uint   Frame;
    uint   InitialLightSampleCount;
    uint   TemporalSampleCountMultiplier;
    float  SpatialPosThreshold;
    float  SpatialNormalThreshold;
    uint   SpatialNeighbors;
    float  SpatialRadius;
    uint   Flags;
}
RestirConfig;

struct Reservoir {
	vec4 samples[4];
	uint numStreamSamples;
};

layout(binding = 12,  set = 0) buffer Reservoirs{ Reservoir reservoirs[]; } reservoirs;
layout(binding = 13,  set = 0) buffer PrevFrameReservoirs { Reservoir prevFrameReservoirs[]; } prevFrameReservoirs;

#define ALBEDO 0
#define WORLDNORMAL 1
#define WORLDPOS 2
#define MOTION 3
layout(set = 0, binding = 14) uniform sampler2D GBufferTextures[4];

// Declare hitpayloads

#define HITPAYLOAD_OUT
#include "../../foray/src/shaders/rt_common/payload.glsl"

void main() 
{
	uvec2 pixelCoord = gl_LaunchIDEXT.xy;

	const vec2 pixelCenter = vec2(pixelCoord) + vec2(0.5);
	const vec2 inUV = pixelCenter/vec2(gl_LaunchSizeEXT.xy);
	vec2 d = inUV * 2.0 - 1.0;

	vec4 origin = Camera.InverseViewMatrix * vec4(0,0,0,1);
	vec4 target = Camera.InverseProjectionMatrix * vec4(d.x, d.y, 1, 1) ;
	vec4 direction = Camera.InverseViewMatrix*vec4(normalize(target.xyz), 0) ;

	float tmin = 0.001;
	float tmax = 10000.0;

    ChildPayload = ConstructHitPayload();

	ivec2 texSize = textureSize(NoiseSource, 0);

	ivec2 texel = ivec2(pixelCoord.x % texSize.x, pixelCoord.y % texSize.y);

	uint left = TracerConfig.RngSeed;
	uint right = texelFetch(NoiseSource, texel, 0).x;
	for (int i = 0; i < 4; i++)
	{
		uint temp = left & 0xFFFF | (right << 16);
		temp = lcgUint(temp) * lcgUint(temp);
		right += left;
		left += temp;
	}
	ChildPayload.Seed = left + right;

    traceRayEXT(MainTlas, 0, 0xff, 0, 0, 0, origin.xyz, tmin, direction.xyz, tmax, 0);

	imageStore(ImageOutput, ivec2(pixelCoord.xy), vec4(ChildPayload.Radiance, 1.0));

	// testing reservoirs  
	vec4 color = vec4((prevFrameReservoirs.prevFrameReservoirs[0].numStreamSamples % 255) / 255.0f);
	reservoirs.reservoirs[0].numStreamSamples = prevFrameReservoirs.prevFrameReservoirs[0].numStreamSamples + 1;

	vec3 albedo = texelFetch(GBufferTextures[WORLDPOS], ivec2(pixelCoord), 0).xyz;
	imageStore(ImageOutput, ivec2(pixelCoord.xy), vec4(albedo,1));
}
